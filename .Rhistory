names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(jsonlite)
library(tidyverse)
library(plotly)
genres <- fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
your_choices <- as.list(genres$id)
names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(jsonlite)
library(tidyverse)
genres <- fromJSON("https://api.themoviedb.org/3/tv/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
fromJSON("https://api.themoviedb.org/3/tv/?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")
fromJSON("https://api.themoviedb.org/3/tv/1?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")
fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")
fromJSON("http://api.themoviedb.org/3/discover/tv?&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec"
fromJSON("http://api.themoviedb.org/3/discover/tv?&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")
fromJSON("http://api.themoviedb.org/3/discover/tv?&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")
rm(list = ls())
tst <- fromJSON("http://api.themoviedb.org/3/discover/tv?&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")
tst$results
tst$results
tibble(tst$results)
data.frame(tst)
testing - data.frame(tst)
testing <- data.frame(tst)
View(testing)
tst <- fromJSON("http://api.themoviedb.org/3/discover/tv?&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")
tst$results
tst$results
View(data.frame(tst$results)
View(data.frame(tst$results))
View(data.frame(tst$results))
fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")
tst <- fromJSON("http://api.themoviedb.org/3/discover/tv?with_genres=53&&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")
View(data.frame(tst$results))
tst <- fromJSON("http://api.themoviedb.org/3/discover/tv?with_genres=53&primary_release_year=2016&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")
View(data.frame(tst$results))
tst <- fromJSON("http://api.themoviedb.org/3/discover/tv?with_genres=53&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")
View(data.frame(tst$results))
tvshows <- fromJSON("http://api.themoviedb.org/3/discover/tv?with_genres=53&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")
tvshows
?fromJSON
library(shiny)
library(jsonlite)
library(tidyverse)
library(plotly)
genres <- fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
your_choices <- as.list(genres$id)
names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(jsonlite)
library(tidyverse)
library(plotly)
genres <- fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
your_choices <- as.list(genres$id)
names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(movies)
rm(list = ls())
library(shiny)
library(jsonlite)
library(tidyverse)
library(plotly)
genres <- fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
your_choices <- as.list(genres$id)
names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(genres)
"http://api.themoviedb.org/3/discover/movie?with_genres=28&primary_release_year=2016&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec"
fromJSON("http://api.themoviedb.org/3/discover/movie?with_genres=28&primary_release_year=2016&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")
fromJSON("http://api.themoviedb.org/3/discover/movie?with_genres=28&primary_release_year=2016&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")$results
data.frame(fromJSON("http://api.themoviedb.org/3/discover/movie?with_genres=28&primary_release_year=2016&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")$results)
df <- data.frame(fromJSON("http://api.themoviedb.org/3/discover/movie?with_genres=28&primary_release_year=2016&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec")$results)
View(df)
rm(list = ls())
library(shiny)
library(jsonlite)
library(tidyverse)
library(plotly)
genres <- fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
your_choices <- as.list(genres$id)
names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(jsonlite)
library(tidyverse)
library(plotly)
genres <- fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
your_choices <- as.list(genres$id)
names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(jsonlite)
library(tidyverse)
library(plotly)
genres <- fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
your_choices <- as.list(genres$id)
names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(jsonlite)
library(tidyverse)
library(plotly)
genres <- fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
your_choices <- as.list(genres$id)
names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(jsonlite)
library(tidyverse)
library(plotly)
genres <- fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
your_choices <- as.list(genres$id)
names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp()
library(shiny)
library(jsonlite)
library(tidyverse)
library(plotly)
genres <- fromJSON("https://api.themoviedb.org/3/genre/movie/list?api_key=859ad22c317ddece75713d77b3ae28ec&language=en-US")$genres %>% as_tibble()
your_choices <- as.list(genres$id)
names(your_choices) <- genres$name
ui <- fluidPage(
# Application title
titlePanel("The Movie DB"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selectYr",
"Year:",
choices = seq(2000, 2017, 1),
selected = 2016),
selectInput("selectGenre", "Genre:",
choices = your_choices)
),
mainPanel(
plotlyOutput("moviePlot"),
verbatimTextOutput("movieText")
)
)
)
server <- function(input, output) {
movies_tibble <- reactive({fromJSON(
sprintf("http://api.themoviedb.org/3/discover/movie?with_genres=%s&primary_release_year=%s&sort_by=vote_average.desc&vote_count.gte=10&api_key=859ad22c317ddece75713d77b3ae28ec",
input$selectGenre,
input$selectYr))$results %>% select(title, original_language, release_date, popularity, vote_count, vote_average, overview) %>% as_tibble()
})
output$moviePlot <- renderPlotly({
plot_ly(movies_tibble(), x = ~vote_average, y = ~vote_count, text = ~title, color = ~original_language, key = ~title) %>%
config(displayModeBar = F)
})
output$movieText <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point to see synopsis" else movies_tibble()$overview[movies_tibble()$title == unlist(d$key)]
})
}
# Run the application
shinyApp(ui = ui, server = server)
